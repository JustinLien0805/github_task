import { type NextPage } from "next";
import { useState } from "react";
import Head from "next/head";
import axios from "axios";
import { signIn, signOut, useSession } from "next-auth/react";
import { useInfiniteQuery } from "@tanstack/react-query";

const Home: NextPage = () => {
  const [issues, setIssues] = useState([]);
  const { data: session } = useSession();

  async function getAuthenticatedUsername(accessToken: string) {
    try {
      const { data } = await axios.get("https://api.github.com/user", {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      });
      const username: string = data.login;
      return username;
    } catch (error) {
      console.error(error);
    }
  }

  async function fetchUserIssues(username: string) {
    try {
      const { data } = await axios.get(
        `https://api.github.com/search/issues?q=type:issue+is:open+author:${username}`
      );

      console.log(data);
    } catch (error) {
      console.error(error);
    }
  }

  async function fetchIssues(username: string, pageNumber = 0) {
    const pageSize = 10;
    const startIndex = pageNumber * pageSize;
    const url = `https://api.github.com/search/issues?q=type:issue+is:open+author:${username}&per_page=${pageSize}&page=${
      pageNumber + 1
    }`;
    const { data } = await axios.get(url);

    const issues = data.items;
    const hasMore = issues.length === pageSize;
    const nextIndex = hasMore ? startIndex + pageSize : undefined;
    console.log(issues, hasMore, nextIndex);

    return {
      issues,
      hasMore,
      nextIndex,
    };
  }

  // allow user to fetch their issues
  const handleIssue = async () => {
    const username = await getAuthenticatedUsername(session?.accessToken);
    if (username !== undefined) {
      fetchIssues(username);
    }
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex w-full flex-col justify-center">
        {session?.user ? (
          <button className="btn" onClick={() => signOut()}>
            sign out
          </button>
        ) : (
          <button className="btn" onClick={() => signIn()}>
            sign in
          </button>
        )}
        <button onClick={handleIssue}>get issues</button>
      </div>
    </>
  );
};

export default Home;
