import { type NextPage } from "next";
import { useEffect, useState } from "react";
import Head from "next/head";
import axios from "axios";
import { signIn, signOut, useSession } from "next-auth/react";
import { useInfiniteQuery } from "@tanstack/react-query";
import { useInView } from "react-intersection-observer";

const Home: NextPage = () => {
  const { data: session } = useSession();

  async function getAuthenticatedUsername(accessToken: string) {
    try {
      const { data } = await axios.get("https://api.github.com/user", {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      });
      const username: string = data.login;
      console.log(username);
      return username;
    } catch (error) {
      console.log("error");
      console.error(error);
    }
  }

  // fetch issues by username
  async function fetchIssues(pageNumber = 0) {
    const username = await getAuthenticatedUsername(session?.accessToken);
    const pageSize = 1;
    const startIndex = pageNumber * pageSize;
    const url = `https://api.github.com/search/issues?q=author:${username}+is:open&sort=created&order=asc&per_page=${pageSize}&page=${pageNumber}`;
    if (username) {
      const { data } = await axios.get(url);
      const issues = data.items;
      const hasMore = issues.length === pageSize;
      const nextIndex = hasMore ? startIndex + pageSize : undefined;
      return {
        issues,
        hasMore,
        nextIndex,
      };
    }
  }

  const { data, fetchNextPage, hasNextPage, isFetchingNextPage, isFetching } =
    useInfiniteQuery(
      ["issues"],
      ({ pageParam = 1 }) => fetchIssues(pageParam),
      {
        getNextPageParam: (lastPage) => lastPage?.nextIndex,
      }
    );

  const { ref, inView } = useInView();
  useEffect(() => {
    if (inView) {
      fetchNextPage();
    }
  }, [inView]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex w-full flex-col justify-center">
        {session?.user ? (
          <button className="btn" onClick={() => signOut()}>
            sign out
          </button>
        ) : (
          <button className="btn" onClick={() => signIn()}>
            sign in
          </button>
        )}
      </div>
      {/* <button onClick={() => fetchIssues(1)}>get</button> */}
      <div>
        {data?.pages.map((page, index: number) => (
          <ul key={index}>
            {page?.issues.map((issue: { title: string }, index: number) => (
              <li key={index} className="h-screen">
                {issue.title}
              </li>
            ))}
          </ul>
        ))}

        {/* {hasNextPage && (
          <button onClick={() => fetchNextPage()} disabled={isFetchingNextPage}>
            {isFetchingNextPage ? "Loading more..." : "Load more"}
          </button>
        )} */}
        <div>
          <button
            ref={ref}
            onClick={() => fetchNextPage()}
            disabled={!hasNextPage || isFetchingNextPage}
          >
            {isFetchingNextPage
              ? "Loading more..."
              : hasNextPage
              ? "Load Newer"
              : "Nothing more to load"}
          </button>
        </div>
        <div>
          {isFetching && !isFetchingNextPage ? "Background Updating..." : null}
        </div>
      </div>
    </>
  );
};

export default Home;
