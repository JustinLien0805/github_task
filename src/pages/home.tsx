import { type NextPage } from "next";
import { useEffect, useState } from "react";
import { useSession } from "next-auth/react";
import { signOut } from "next-auth/react";
import { useRouter } from "next/router";
import Issue from "~/components/Issue";
import { BounceLoader } from "react-spinners";
import Head from "next/head";
import useFilteredIssues from "~/utils/useFilteredIssues";
type Issue = {
  items: Array<{
    id: number;
    url: string;
    title: string;
    body: string;
    repository_url: string;
    created_at: string;
    state: string;
    labels: Array<{ color: string; name: string }>;
  }>;
};

type Query = {
  text: string;
  label: string;
  sortTime: string;
};

const Home: NextPage = () => {
  const [query, setQuery] = useState<Query>({
    text: "",
    label: "",
    sortTime: "desc",
  });
  const { data: session, status } = useSession();

  const router = useRouter();
  useEffect(() => {
    if (status === "unauthenticated") {
      void router.push("/");
    }
  }, [status]);

  const { data, hasNextPage, isFetchingNextPage, isLoading, isError } =
    useFilteredIssues(query);

  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setQuery({ ...query, text: event.target.value });
  };

  return (
    <>
      <Head>
        <title>GitHub Task Manager</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex w-full flex-col justify-center gap-8 px-2 pt-8 sm:py-20 sm:px-8">
        <div className="flex items-center">
          <h1 className="text-2xl font-bold sm:text-3xl">
            Github Task Manager
          </h1>
          <button className="btn ml-auto" onClick={() => signOut()}>
            sign out
          </button>
        </div>
        <input
          type="text"
          className="input-bordered input"
          value={query.text}
          placeholder="Search issues by title or body"
          onChange={handleQueryChange}
        />
        <div className="flex flex-wrap">
          <div className="dropdown">
            <label tabIndex={0} className="btn m-1">
              {query.label || "Sorted by Label"}
            </label>
            <ul
              tabIndex={0}
              className="dropdown-content menu rounded-box w-52 bg-base-300 p-2 shadow"
            >
              <li>
                <a onClick={() => setQuery({ ...query, label: "done" })}>
                  done
                </a>
              </li>
              <li>
                <a onClick={() => setQuery({ ...query, label: "in progress" })}>
                  in progress
                </a>
              </li>
              <li>
                <a onClick={() => setQuery({ ...query, label: "open" })}>
                  open
                </a>
              </li>
            </ul>
          </div>
          <div className="dropdown">
            <label tabIndex={1} className="btn m-1">
              {query.sortTime || "Sorted by time"}
            </label>
            <ul
              tabIndex={1}
              className="dropdown-content menu rounded-box w-52 bg-base-300 p-2 shadow"
            >
              <li>
                <a onClick={() => setQuery({ ...query, sortTime: "asc" })}>
                  ASC
                </a>
              </li>
              <li>
                <a onClick={() => setQuery({ ...query, sortTime: "desc" })}>
                  DESC
                </a>
              </li>
            </ul>
          </div>
          <button
            className="btn m-1"
            onClick={() => {
              setQuery({
                text: "",
                label: "",
                sortTime: "desc",
              });
            }}
          >
            clear filter
          </button>
        </div>
        <ul className="flex flex-col gap-4">
          {data?.pages.map((issue: Issue) =>
            issue.items?.map((item) => <Issue key={item.id} item={item} />)
          )}
          {isFetchingNextPage ||
            (isLoading && (
              <li className="flex items-center justify-center">
                <BounceLoader color="#fafafa" />
              </li>
            ))}
          {!hasNextPage && !isError && (
            <li className="text-center">End of issues</li>
          )}
          {isError && (
            <li className="text-center text-red-500">
              API rate limit exceeded. Please and try again later.
            </li>
          )}
        </ul>
      </div>
    </>
  );
};

export default Home;
